/*
프론트엔드에서 웹을 다루는 핵심 구조 DOM 자체가 트리구조
재귀, 깊이/너비 우선 탐색, 상위 하위 노드 간 관계를 잘 이해하면 성능과 유지보수에 유리

트리(tree)
- 루트(시작점) 중심으로 하나 이상의 꼭짓점들이 비선형이면서 비순환적 경로로 연결되어있는 그래프
비순환 - 절대 올라가지 않음
시작점을 기준으로 위에서 아래로 내려가는 구조

자료구조의 가장 기본적인 단위
노드(Node)
- 데이터와 다른 노드에 연결정보 포함(주소)
- 정보를 담은 박스

*/

// 객체를 생성하기 위한 템플릿
class TreeNode{
  // 값을 받기 위해서 생성할 때 값을 초기화 하는구조
  constructor(data){
    this.data = data;
  }
}

// constructor()
// - 변수를 처음 만들 때 실행되는 함수
// - 객체를 만들 때 자동으로 constructor가 실행되어 초기값 설정

// 실제 틀을 만들었기 때문에 메모리 생성
const node1 = new TreeNode(50);

// 클래스 생성
// 사람에 대한 정보를 생성하는 객체

class User{
  constructor(name, age){
    // 현재 생성되는 변수의 이름과 나이를 저장
    this.name = name; // 외부에서 들어온 이름을 여기로 저장
    this.age = age;
  }
}

const user1 = new User("","");
console.log(user1.name)

class Animal{
  constructor(name,breed){
    if(name==='' || breed===''){
      alert('초기값을 입력')
    }

    this.name = name;
    this.breed = breed;
  }
}

const cat = new Animal("냥냥","삼색");

// 트리 종류
// 6가지

// 1. 일반트리
// - 제한 없는 자식 노드를 가질 수 있음
// - 조직도, 메뉴 트리

// 2. 2진트리
// - 자식 노드를 최대 2개까지만 가질 수 있음
// - 토너먼트 구조

// 3. 포화 이진 트리
// - 모든 레벨의 부모노드에 자식노드가 2개 이거나 아예 없는 0인 구조

// 4. 완전 이진 트리
// - 왼쪽부터 차곡차곡 채워진 이진트리

// 5. 이진 탐색 트리

// 6. 균형 이진 트리

// 이진트리를 많이 사용하는 이유
// - 최대 자식이 2개밖에 없음
// - 정렬된 데이터를 빠르게 탐색, 삽입, 삭제 가능